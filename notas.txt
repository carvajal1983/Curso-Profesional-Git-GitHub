# Curso Profesional de Git y GitHub

#¿Qué es Git?

# Git es un software de control de versiones diseñado por Linus Torvalds, 
# pensando en la eficiencia y la confiabilidad del mantenimiento de versiones de aplicaciones 
# cuando estas tienen un gran número de archivos de código fuente. 
# En su lugar GitHub es una forja para alojar proyectos utilizando el sistema de control de versiones Git. 
# GitHub sería la red social de código para los programadores, tu propio curriculum vitae.



# ¿Por qué usar un sistema de control de versiones como Git?

# Un sistema de control de versiones como Git nos ayuda a guardar el historial de cambios y crecimiento 
# de los archivos de nuestro proyecto.

# En realidad, los cambios y diferencias entre las versiones de nuestros proyectos pueden tener similitudes, 
# algunas veces los cambios pueden ser solo una palabra o una parte específica de un archivo específico. 
# Git está optimizado para guardar todos estos cambios de forma atómica e incremental, o sea, 
# aplicando cambios sobre los últimos cambios, estos sobre los cambios anteriores y así hasta 
# el inicio de nuestro proyecto.

# El comando para iniciar nuestro repositorio, o sea, 
# indicarle a Git que queremos usar su sistema de control de versiones en nuestro proyecto, es 

    git init

# El comando para que nuestro repositorio sepa de la existencia de un archivo o sus últimos cambios es 

    git add NOMBRE_ARCHIVO.EXTENSION

# Este comando NO almacena las actualizaciones de forma definitiva, 
# solo las guarda en algo que conocemos como “Staging Area” (no te preocupes, lo entenderemos más adelante).
# El comando para almacenar definitivamente todos los cambios que por ahora viven en el staging area es 

    git commit -m "NOMBRE DE LA VERSION"

# También podemos guardar un mensaje para recordar muy bien qué cambios hicimos en este commit 
# con el argumento -m "Mensaje del commit".
# Por último, si queremos mandar nuestros commits a un servidor remoto, 
# un lugar donde todos podamos conectar nuestros proyectos, usamos el comando 
# git push.





# Instalando Git y GitBash en Windows

# Windows y Linux tienen comandos diferentes, graban el enter de formas diferentes y tienen muchas otras diferencias. 
# Cuando instales Git Bash en Windows debes elegir si prefieres trabajar con la forma de Windows o 
# la forma de UNIX (Linux y Mac) .

# Ten en cuenta que, normalmente, los entornos de desarrollo profesionales tienen personas que usan 
# sistemas operativos diferentes. Esto significa que, si todos podemos usar los mismos comandos, 
# el trabajo resultará más fácil para todos en el equipo.

# Los comandos de UNIX son los más comunes entre los equipos de desarrollo. 
# Así que, a menos que trabajes con tecnologías nativas de Microsoft (por ejemplo, .NET), 
# la recomendación es que elijas la opción de la terminal tipo UNIX para obtener 
# una mejor compatibilidad con todo tu equipo.

# https://git-scm.com/downloads






# Instalando Git en OSX:

# La instalación de GIT en Mac es un poco más sencilla. No debemos instalar GitBash porque Mac ya trae por defecto 
# una consola de comandos (la puedes encontrar como “Terminal”). 
# Tampoco debemos configurar OpenSSL porque viene listo por defecto.

# OSX está basado en un Kernel de UNIX llamado BSD. Estos significa que hay algunas diferencias entre 
# las consolas de Mac y Linux. Pero no vas a notar la diferencia a menos que trabajes 
# con acceso profundo a las interfaces de red o los archivos del sistema operativo. 
# Ambas consolas funcionan muy parecido y comparten los comandos que vamos a ver durante el curso.

# Puedes descargar Git aquí: https://git-scm.com
# Puedes verificar que Git fue instalado correctamente con el comando 
    
    git --version.





# Instalando Git en Linux:

# Cada distribución de Linux tiene un comando especial para instalar herramientas y actualizar el sistema.

# En las distribuciones derivadas de Debian (como Ubuntu) el comando especial es apt-get, 
# en Red Hat es yum y en ArchLinux es pacman. Cada distribución tiene su comando especial y debes averiguar 
# cómo funciona para poder instalar Git.

# Antes de hacer la instalación, debemos hacer una actualización del sistema. 
# En nuestro caso, los comandos para hacerlo son 

    sudo apt-get update 

# y
   
    sudo apt-get upgrade

# Con el sistema actualizado, ahora sí podemos instalar Git y, en este caso, 
# el comando para hacerlo es 

    sudo apt-get install git

# También puedes verificar que Git fue instalado correctamente con el comando 

    git --version